<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用图形化对linux磁盘进行扩容</title>
    <link href="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/"/>
    <url>/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806195901.png" class alt="微信截图_20240806195901.png"><p>磁盘空间不足的提示。<br>我就在终端输入df -h查看了一下磁盘的使用情况。<br>文件系统        容量  已用  可用 已用% 挂载点<br>udev             14G     0   14G    0% &#x2F;dev<br>tmpfs           2.7G  1.8M  2.7G    1% &#x2F;run<br>&#x2F;dev&#x2F;sda1        48G   46G   47M  100% &#x2F;<br>tmpfs            14G     0   14G    0% &#x2F;dev&#x2F;shm<br>tmpfs           5.0M     0  5.0M    0% &#x2F;run&#x2F;lock<br>tmpfs           2.7G   60K  2.7G    1% &#x2F;run&#x2F;user&#x2F;130<br>tmpfs           2.7G   52K  2.7G    1% &#x2F;run&#x2F;user&#x2F;0<br>overlay          48G   46G   47M  100% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;40d9810bdeacf6f8af191b96880582457507055ac701cddc05c90bd41a4cc8cd&#x2F;merged<br>overlay          48G   46G   47M  100% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;684b310e0e5d6cd40b0003fea2920d176d49aacacba87d1364dc0f0aa26d429d&#x2F;merged<br>overlay          48G   46G   47M  100% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;71c3fc9620d502f60d702b4a0227cb0ccfe86a05f75c0627a261ac1357a28867&#x2F;merged<br>overlay          48G   46G   47M  100% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3491e006468ecf31bc09cfe8d4ecef08bb37d93d2678f919e0e57f02b76c7cc6&#x2F;merged</p><p>发现&#x2F;dev&#x2F;sda1这个文件系统的使用率打到了90%以上，我就想着给他扩一下容。<br>网上各种找方法….<br>网上一堆复制粘贴的坑逼教程可把我给坑惨了。<br>最后找到了两篇文章综合起来才成功。<br>写出来的目的仅仅为了方便记忆，那么就来说说吧。<br>第一步:<br>使用VMware图像界面工具，对磁盘进行扩容。这一步要先将你的ubantu关机后才可以进行。（必须删除所有快照）点击拓展后就可以指定磁盘大小了。值得注意的是，这里指定的磁盘大小并不是立马分出你给定的磁盘大小。而是给了一个容量上限，你用多少就消耗本机多少空间。所以指定大一点也没关系。</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200518.png" class alt="微信截图_20240806200518.png"><p>第二步:<br>下载Gparted镜像文件。<br><a href="https://jaist.dl.sourceforge.net/project/gparted/gparted-live-testing/1.6.0-3/gparted-live-1.6.0-3-amd64.iso?viasf=1">https://jaist.dl.sourceforge.net/project/gparted/gparted-live-testing/1.6.0-3/gparted-live-1.6.0-3-amd64.iso?viasf=1</a></p><p>然后在虚拟机的设置–CD&#x2F;DVD(SATA)里， 在”启动时连接”前打钩 并选择 上面下载好的 Gparted 镜像， 如下图：</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200410.png" class alt="微信截图_20240806200410.png"><p>第三步:<br>启动BIOS方法:<br>用记事本打开ubantu.vmx文件，在第一行添加这段代码<br>bios.forceSetupOnce &#x3D; “TRUE”</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/img.png" class alt="img.png"><p>保存再打开就可以进入BIOS，这个设置时一次性的，在你开机后这段代码会自动消失，所以设置完之后就不用管了。</p><p>进入BIOS后用←→键选择进入BOOT，然后用↑↓选择到CD-ROM drive，再按” + “号把它一到第一位。然后按F10保存退出。</p><p>开机后即可进入这个界面。</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200751.png" class alt="微信截图_20240806200751.png"><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200831.png" class alt="微信截图_20240806200831.png"><p>输入26选择简体中文，敲回车</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200853.png" class alt="微信截图_20240806200853.png"><p>输入0，敲回车</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200913.png" class alt="微信截图_20240806200913.png"><p>进入Gparted的界面会自动弹出Gparted的分区界面。</p><img src="/2024/08/06/%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%89%A9%E5%AE%B9/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240806200924.png" class alt="微信截图_20240806200924.png"><p>依次删除 linux-swap项， extended项， 最后只剩下sda1和未分配， 然后右键”sda1”项进行调整大小，<br>将磁盘容量调整到合适的大小最好是1024的整数倍，并预留空间(2-4G)作为交换区，交换区的大小为你系统内存的大小。<br>再右键”未分配”进行扩展分区出extended分区，然后新建逻辑分区linux-swap，操作完成后点击APPLY提交。然后退出<br>然后正常启动你的ubantu，再次输入命令df -h查看扩容是否成功</p><p>└─# df -h<br>文件系统        容量  已用  可用 已用% 挂载点<br>udev             14G     0   14G    0% &#x2F;dev<br>tmpfs           2.7G  1.8M  2.7G    1% &#x2F;run<br>&#x2F;dev&#x2F;sda1       144G   34G  104G   25% &#x2F;<br>tmpfs            14G     0   14G    0% &#x2F;dev&#x2F;shm<br>tmpfs           5.0M     0  5.0M    0% &#x2F;run&#x2F;lock<br>tmpfs           2.7G   60K  2.7G    1% &#x2F;run&#x2F;user&#x2F;130<br>overlay         144G   34G  104G   25% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;71c3fc9620d502f60d702b4a0227cb0ccfe86a05f75c0627a261ac1357a28867&#x2F;merged<br>overlay         144G   34G  104G   25% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;684b310e0e5d6cd40b0003fea2920d176d49aacacba87d1364dc0f0aa26d429d&#x2F;merged<br>overlay         144G   34G  104G   25% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;40d9810bdeacf6f8af191b96880582457507055ac701cddc05c90bd41a4cc8cd&#x2F;merged<br>overlay         144G   34G  104G   25% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;3491e006468ecf31bc09cfe8d4ecef08bb37d93d2678f919e0e57f02b76c7cc6&#x2F;merged<br>tmpfs           2.7G   56K  2.7G    1% &#x2F;run&#x2F;user&#x2F;0<br>overlay         144G   34G  104G   25% &#x2F;var&#x2F;lib&#x2F;docker&#x2F;overlay2&#x2F;930ee5b9896adee4a28eec7579f04eda6b9fb74888d7c2fb13d4834d6164d782&#x2F;merged</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对linux磁盘进行无损扩容</title>
    <link href="/2024/08/05/%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%97%A0%E6%8D%9F%E6%89%A9%E5%AE%B9/"/>
    <url>/2024/08/05/%E5%AF%B9linux%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E6%97%A0%E6%8D%9F%E6%89%A9%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>执行 lsblk 命令得到的数据如下<br>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS<br>sda      8:0    0  150G  0 disk <br>├─sda1   8:1    0   49G  0 part /<br>├─sda2   8:2    0    1K  0 part <br>└─sda5   8:5    0  975M  0 part [SWAP]<br>sr0     11:0    1  4.6G  0 rom  <br></code></pre></td></tr></table></figure><br>此时，想将sda1从49G扩容到150G。进行无损扩展 <code>/dev/sda1</code> 的步骤较为复杂，但可以通过以下步骤来安全地扩展分区而不丢失数据。这包括使用 <code>fdisk</code> 或 <code>parted</code> 工具来调整分区大小，然后扩展文件系统。</p><h3 id="无损扩展分区的步骤"><a href="#无损扩展分区的步骤" class="headerlink" title="无损扩展分区的步骤"></a>无损扩展分区的步骤</h3><h4 id="1-备份数据"><a href="#1-备份数据" class="headerlink" title="1. 备份数据"></a>1. <strong>备份数据</strong></h4><p>在进行任何磁盘操作之前，务必备份重要数据以防万一。</p><h4 id="2-使用-parted-调整分区大小"><a href="#2-使用-parted-调整分区大小" class="headerlink" title="2. 使用 parted 调整分区大小"></a>2. <strong>使用 <code>parted</code> 调整分区大小</strong></h4><p>假设现有的 <code>/dev/sda1</code> 是 <code>ext4</code> 文件系统。</p><ol><li><p><strong>查看当前磁盘布局</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br>sudo fdisk -l /dev/sda<br></code></pre></td></tr></table></figure></li><li><p><strong>调整分区大小</strong></p><p>使用 <code>parted</code> 调整分区大小。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo parted /dev/sda<br></code></pre></td></tr></table></figure><p>在 <code>parted</code> 交互界面中执行以下步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) <span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>确认分区表，并记下 <code>/dev/sda1</code> 的起始位置（例如 <code>2048s</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) resizepart 1 150GB<br></code></pre></td></tr></table></figure><p>这会扩展分区1到150GB。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(parted) quit<br></code></pre></td></tr></table></figure></li></ol><h4 id="3-更新分区表"><a href="#3-更新分区表" class="headerlink" title="3. 更新分区表"></a>3. <strong>更新分区表</strong></h4><p>有时，系统需要重新加载分区表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo partprobe /dev/sda<br></code></pre></td></tr></table></figure><h4 id="4-扩展文件系统"><a href="#4-扩展文件系统" class="headerlink" title="4. 扩展文件系统"></a>4. <strong>扩展文件系统</strong></h4><p>根据你的文件系统类型，执行以下步骤来扩展文件系统。</p><h5 id="对于-ext4-文件系统："><a href="#对于-ext4-文件系统：" class="headerlink" title="对于 ext4 文件系统："></a>对于 <code>ext4</code> 文件系统：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo resize2fs /dev/sda1<br></code></pre></td></tr></table></figure><h5 id="对于-xfs-文件系统："><a href="#对于-xfs-文件系统：" class="headerlink" title="对于 xfs 文件系统："></a>对于 <code>xfs</code> 文件系统：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo xfs_growfs /dev/sda1<br></code></pre></td></tr></table></figure><h4 id="5-验证扩展是否成功"><a href="#5-验证扩展是否成功" class="headerlink" title="5. 验证扩展是否成功"></a>5. <strong>验证扩展是否成功</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><h3 id="示例步骤"><a href="#示例步骤" class="headerlink" title="示例步骤"></a>示例步骤</h3><p>完整的命令和步骤如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前磁盘布局</span><br>lsblk<br>sudo fdisk -l /dev/sda<br><br><span class="hljs-comment"># 调整分区大小</span><br>sudo parted /dev/sda<br><br><span class="hljs-comment"># 在 parted 交互界面中</span><br>(parted) <span class="hljs-built_in">print</span><br>(parted) resizepart 1 150GB<br>(parted) quit<br><br><span class="hljs-comment"># 更新分区表</span><br>sudo partprobe /dev/sda<br><br><span class="hljs-comment"># 扩展文件系统（假设是 ext4 文件系统）</span><br>sudo resize2fs /dev/sda1<br><br><span class="hljs-comment"># 验证扩展是否成功</span><br><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>确保你的 <code>/dev/sda1</code> 分区后面有足够的未分配空间来扩展到 150GB。</li><li>在操作之前，确保系统分区未被使用或者在单用户模式下进行操作，以防止数据损坏。</li><li>如果你无法进入系统，可以通过 live CD&#x2F;USB 启动系统并执行这些操作。</li></ul><p>这些步骤旨在提供一种相对安全的方法来无损扩展分区。如果对操作不熟悉，建议请教专业人士或使用专业的分区管理软件进行操作。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解读redis分布式锁核心逻辑</title>
    <link href="/2024/07/30/%E8%A7%A3%E8%AF%BBredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91/"/>
    <url>/2024/07/30/%E8%A7%A3%E8%AF%BBredis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E6%A0%B8%E5%BF%83%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[   <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> insertable = <span class="hljs-literal">false</span>; <span class="hljs-keyword">local</span> value = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">if</span> value == <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> insertable = <span class="hljs-literal">true</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">local</span> t, val = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, value); <span class="hljs-keyword">local</span> expireDate = <span class="hljs-number">92233720368547758</span>; <span class="hljs-keyword">local</span> expireDateScore = redis.call(<span class="hljs-string">&#x27;zscore&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">if</span> expireDateScore ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> expireDate = <span class="hljs-built_in">tonumber</span>(expireDateScore) <span class="hljs-keyword">end</span>; <span class="hljs-keyword">if</span> t ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">local</span> expireIdle = redis.call(<span class="hljs-string">&#x27;zscore&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">if</span> expireIdle ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> expireDate = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">min</span>(expireDate, <span class="hljs-built_in">tonumber</span>(expireIdle)) <span class="hljs-keyword">end</span>; <span class="hljs-keyword">end</span>; <span class="hljs-keyword">if</span> expireDate &lt;= <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span> insertable = <span class="hljs-literal">true</span>; <span class="hljs-keyword">end</span>; <span class="hljs-keyword">end</span>; <span class="hljs-keyword">if</span> insertable == <span class="hljs-literal">true</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">if</span> <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">2</span>]) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">else</span> redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">end</span>; <span class="hljs-keyword">if</span> <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">3</span>]) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">else</span> redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">end</span>; <span class="hljs-keyword">local</span> maxSize = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">7</span>], <span class="hljs-string">&#x27;max-size&#x27;</span>)); <span class="hljs-keyword">if</span> maxSize ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> maxSize ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span>     <span class="hljs-keyword">local</span> currentTime = <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">1</span>]);     <span class="hljs-keyword">local</span> lastAccessTimeSetName = KEYS[<span class="hljs-number">5</span>]; <span class="hljs-keyword">local</span> mode = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">7</span>], <span class="hljs-string">&#x27;mode&#x27;</span>); <span class="hljs-keyword">if</span> mode == <span class="hljs-literal">false</span> <span class="hljs-keyword">or</span> mode == <span class="hljs-string">&#x27;LRU&#x27;</span> <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">end</span>;     <span class="hljs-keyword">local</span> cacheSize = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;hlen&#x27;</span>, KEYS[<span class="hljs-number">1</span>]));     <span class="hljs-keyword">if</span> cacheSize &gt;= maxSize <span class="hljs-keyword">then</span>         <span class="hljs-keyword">local</span> lruItems = redis.call(<span class="hljs-string">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class="hljs-number">0</span>, cacheSize - maxSize);         <span class="hljs-keyword">for</span> index, lruItem <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(lruItems) <span class="hljs-keyword">do</span>             <span class="hljs-keyword">if</span> lruItem <span class="hljs-keyword">and</span> lruItem ~= ARGV[<span class="hljs-number">5</span>] <span class="hljs-keyword">then</span>                 <span class="hljs-keyword">local</span> lruItemValue = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">1</span>], lruItem);                 redis.call(<span class="hljs-string">&#x27;hdel&#x27;</span>, KEYS[<span class="hljs-number">1</span>], lruItem);                 redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">2</span>], lruItem);                 redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">3</span>], lruItem);                 redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem);                 <span class="hljs-keyword">if</span> lruItemValue ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span>                 <span class="hljs-keyword">local</span> removedChannelName = KEYS[<span class="hljs-number">6</span>]; <span class="hljs-keyword">local</span> ttl, obj = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, lruItemValue);                    <span class="hljs-keyword">local</span> msg = struct.pack(<span class="hljs-string">&#x27;Lc0Lc0&#x27;</span>, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(lruItem), lruItem, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(obj), obj);                redis.call(<span class="hljs-string">&#x27;publish&#x27;</span>, removedChannelName, msg); <span class="hljs-keyword">end</span>;             <span class="hljs-keyword">end</span>;         <span class="hljs-keyword">end</span>;     <span class="hljs-keyword">end</span>; <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;LFU&#x27;</span> <span class="hljs-keyword">then</span> redis.call(<span class="hljs-string">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class="hljs-number">1</span>, ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">end</span>; <span class="hljs-keyword">end</span>; <span class="hljs-keyword">local</span> val = struct.pack(<span class="hljs-string">&#x27;dLc0&#x27;</span>, <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">4</span>]), <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">6</span>]), ARGV[<span class="hljs-number">6</span>]); redis.call(<span class="hljs-string">&#x27;hset&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>], val); <span class="hljs-keyword">local</span> msg = struct.pack(<span class="hljs-string">&#x27;Lc0Lc0&#x27;</span>, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">5</span>]), ARGV[<span class="hljs-number">5</span>], <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">6</span>]), ARGV[<span class="hljs-number">6</span>]); redis.call(<span class="hljs-string">&#x27;publish&#x27;</span>, KEYS[<span class="hljs-number">4</span>], msg); <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>; <span class="hljs-keyword">else</span> <span class="hljs-keyword">local</span> t, val = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, value); redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">3</span>], t + ARGV[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>]); <span class="hljs-keyword">return</span> val; <span class="hljs-keyword">end</span>; <br></code></pre></td></tr></table></figure><p>这段Lua脚本用于Redis缓存的管理和插入操作，主要功能包括：</p><ul><li>判断是否需要插入或更新缓存。</li><li>处理缓存的过期逻辑。</li><li>实现基于LRU（最近最少使用）或LFU（最少使用频率）策略的缓存淘汰。</li><li>在缓存项插入或更新时发布相关消息。</li></ul><p>具体的解读如下：</p><ol><li><p><strong>初始化和获取当前值</strong>：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">local</span> insertable = <span class="hljs-literal">false</span><br><span class="hljs-keyword">local</span> value = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure></li><li><p><strong>判断当前缓存项是否存在</strong>：</p><ul><li>如果不存在，则设置<code>insertable</code>为<code>true</code>，表示可以插入新的缓存项。</li><li>如果存在，继续判断其过期时间。<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> value == <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> <br>    insertable = <span class="hljs-literal">true</span> <br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">local</span> t, val = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, value)<br>    <span class="hljs-keyword">local</span> expireDate = <span class="hljs-number">92233720368547758</span><br>    <span class="hljs-keyword">local</span> expireDateScore = redis.call(<span class="hljs-string">&#x27;zscore&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">if</span> expireDateScore ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> expireDate = <span class="hljs-built_in">tonumber</span>(expireDateScore) <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> t ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">local</span> expireIdle = redis.call(<span class="hljs-string">&#x27;zscore&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>])<br>        <span class="hljs-keyword">if</span> expireIdle ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span> expireDate = <span class="hljs-built_in">math</span>.<span class="hljs-built_in">min</span>(expireDate, <span class="hljs-built_in">tonumber</span>(expireIdle)) <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> expireDate &lt;= <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span> insertable = <span class="hljs-literal">true</span> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>处理可插入的情况</strong>：</p><ul><li>更新或删除过期时间。</li><li>检查缓存大小，并根据LRU或LFU策略进行淘汰。<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">if</span> insertable == <span class="hljs-literal">true</span> <span class="hljs-keyword">then</span> <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">2</span>]) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <br>        redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">else</span> <br>        redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">2</span>], ARGV[<span class="hljs-number">5</span>]) <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">3</span>]) &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <br>        redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">else</span> <br>        redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">3</span>], ARGV[<span class="hljs-number">5</span>]) <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">local</span> maxSize = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">7</span>], <span class="hljs-string">&#x27;max-size&#x27;</span>))<br>    <span class="hljs-keyword">if</span> maxSize ~= <span class="hljs-literal">nil</span> <span class="hljs-keyword">and</span> maxSize ~= <span class="hljs-number">0</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">local</span> currentTime = <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">local</span> lastAccessTimeSetName = KEYS[<span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">local</span> mode = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">7</span>], <span class="hljs-string">&#x27;mode&#x27;</span>)<br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-literal">false</span> <span class="hljs-keyword">or</span> mode == <span class="hljs-string">&#x27;LRU&#x27;</span> <span class="hljs-keyword">then</span> <br>            redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, lastAccessTimeSetName, currentTime, ARGV[<span class="hljs-number">5</span>])<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">local</span> cacheSize = <span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;hlen&#x27;</span>, KEYS[<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">if</span> cacheSize &gt;= maxSize <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">local</span> lruItems = redis.call(<span class="hljs-string">&#x27;zrange&#x27;</span>, lastAccessTimeSetName, <span class="hljs-number">0</span>, cacheSize - maxSize)<br>            <span class="hljs-keyword">for</span> index, lruItem <span class="hljs-keyword">in</span> <span class="hljs-built_in">ipairs</span>(lruItems) <span class="hljs-keyword">do</span><br>                <span class="hljs-keyword">if</span> lruItem <span class="hljs-keyword">and</span> lruItem ~= ARGV[<span class="hljs-number">5</span>] <span class="hljs-keyword">then</span><br>                    <span class="hljs-keyword">local</span> lruItemValue = redis.call(<span class="hljs-string">&#x27;hget&#x27;</span>, KEYS[<span class="hljs-number">1</span>], lruItem)<br>                    redis.call(<span class="hljs-string">&#x27;hdel&#x27;</span>, KEYS[<span class="hljs-number">1</span>], lruItem)<br>                    redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">2</span>], lruItem)<br>                    redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, KEYS[<span class="hljs-number">3</span>], lruItem)<br>                    redis.call(<span class="hljs-string">&#x27;zrem&#x27;</span>, lastAccessTimeSetName, lruItem)<br>                    <span class="hljs-keyword">if</span> lruItemValue ~= <span class="hljs-literal">false</span> <span class="hljs-keyword">then</span><br>                        <span class="hljs-keyword">local</span> removedChannelName = KEYS[<span class="hljs-number">6</span>]<br>                        <span class="hljs-keyword">local</span> ttl, obj = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, lruItemValue)<br>                        <span class="hljs-keyword">local</span> msg = struct.pack(<span class="hljs-string">&#x27;Lc0Lc0&#x27;</span>, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(lruItem), lruItem, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(obj), obj)<br>                        redis.call(<span class="hljs-string">&#x27;publish&#x27;</span>, removedChannelName, msg)<br>                    <span class="hljs-keyword">end</span><br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;LFU&#x27;</span> <span class="hljs-keyword">then</span> <br>            redis.call(<span class="hljs-string">&#x27;zincrby&#x27;</span>, lastAccessTimeSetName, <span class="hljs-number">1</span>, ARGV[<span class="hljs-number">5</span>]) <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">local</span> val = struct.pack(<span class="hljs-string">&#x27;dLc0&#x27;</span>, <span class="hljs-built_in">tonumber</span>(ARGV[<span class="hljs-number">4</span>]), <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">6</span>]), ARGV[<span class="hljs-number">6</span>])<br>    redis.call(<span class="hljs-string">&#x27;hset&#x27;</span>, KEYS[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>], val)<br>    <span class="hljs-keyword">local</span> msg = struct.pack(<span class="hljs-string">&#x27;Lc0Lc0&#x27;</span>, <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">5</span>]), ARGV[<span class="hljs-number">5</span>], <span class="hljs-built_in">string</span>.<span class="hljs-built_in">len</span>(ARGV[<span class="hljs-number">6</span>]), ARGV[<span class="hljs-number">6</span>])<br>    redis.call(<span class="hljs-string">&#x27;publish&#x27;</span>, KEYS[<span class="hljs-number">4</span>], msg)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>处理不可插入的情况</strong>：</p><ul><li>更新过期时间，并返回现有值。<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-keyword">else</span> <br>    <span class="hljs-keyword">local</span> t, val = struct.<span class="hljs-built_in">unpack</span>(<span class="hljs-string">&#x27;dLc0&#x27;</span>, value)<br>    redis.call(<span class="hljs-string">&#x27;zadd&#x27;</span>, KEYS[<span class="hljs-number">3</span>], t + ARGV[<span class="hljs-number">1</span>], ARGV[<span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">return</span> val<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="参数和键值解释"><a href="#参数和键值解释" class="headerlink" title="参数和键值解释"></a>参数和键值解释</h3><ul><li><p><code>KEYS[1]</code>: 哈希表存储缓存项。</p></li><li><p><code>KEYS[2]</code>: 有序集合存储过期时间。</p></li><li><p><code>KEYS[3]</code>: 有序集合存储空闲时间。</p></li><li><p><code>KEYS[4]</code>: 频道名称，用于发布缓存项变更消息。</p></li><li><p><code>KEYS[5]</code>: 有序集合存储最近访问时间（LRU模式）。</p></li><li><p><code>KEYS[6]</code>: 频道名称，用于发布被淘汰的缓存项。</p></li><li><p><code>KEYS[7]</code>: 存储缓存配置（如最大尺寸、模式等）。</p></li><li><p><code>ARGV[1]</code>: 当前时间戳。</p></li><li><p><code>ARGV[2]</code>: 新的过期时间。</p></li><li><p><code>ARGV[3]</code>: 新的空闲时间。</p></li><li><p><code>ARGV[4]</code>: 新缓存项的TTL。</p></li><li><p><code>ARGV[5]</code>: 缓存项的键名。</p></li><li><p><code>ARGV[6]</code>: 缓存项的值。</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用切面或拦截器打印异常日志</title>
    <link href="/2024/07/26/%E4%BD%BF%E7%94%A8%E5%88%87%E9%9D%A2%E6%88%96%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%93%E5%8D%B0%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97/"/>
    <url>/2024/07/26/%E4%BD%BF%E7%94%A8%E5%88%87%E9%9D%A2%E6%88%96%E6%8B%A6%E6%88%AA%E5%99%A8%E6%89%93%E5%8D%B0%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>在Spring Boot中，使用切面（Aspect）或拦截器（Interceptor）来捕获异常并记录日志是一种常见的做法。下面介绍如何使用这两种方式来实现。</p><h3 id="1-使用切面（Aspect）记录异常日志"><a href="#1-使用切面（Aspect）记录异常日志" class="headerlink" title="1. 使用切面（Aspect）记录异常日志"></a>1. 使用切面（Aspect）记录异常日志</h3><p>Spring AOP（Aspect-Oriented Programming）允许你定义横切关注点，比如日志记录、事务管理等。可以通过编写一个切面来捕获所有方法中的异常并记录日志。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p><strong>添加依赖</strong>：<br>确保你的项目中包含Spring AOP相关依赖。如果你使用的是Maven，确保<code>spring-boot-starter-aop</code>已经在你的<code>pom.xml</code>中。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>创建切面类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;<br><span class="hljs-keyword">import</span> org.aspectj.lang.annotation.Aspect;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionLoggingAspect</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(ExceptionLoggingAspect.class);<br><br>    <span class="hljs-comment">// 定义一个切入点，拦截所有方法</span><br>    <span class="hljs-meta">@AfterThrowing(pointcut = &quot;execution(* com.yourpackage..*(..))&quot;, throwing = &quot;exception&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logException</span><span class="hljs-params">(Exception exception)</span> &#123;<br>        logger.error(<span class="hljs-string">&quot;Exception caught: &quot;</span>, exception);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述代码中，<code>@AfterThrowing</code>注解用于定义在方法抛出异常后执行的通知。<code>execution(* com.yourpackage..*(..))</code>表示拦截<code>com.yourpackage</code>包及其子包中所有类的所有方法。</p></li></ol><h3 id="2-使用拦截器（Interceptor）记录异常日志"><a href="#2-使用拦截器（Interceptor）记录异常日志" class="headerlink" title="2. 使用拦截器（Interceptor）记录异常日志"></a>2. 使用拦截器（Interceptor）记录异常日志</h3><p>Spring中的拦截器允许你在HTTP请求处理的各个阶段执行一些操作，可以用来记录异常日志。</p><h4 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p><strong>创建拦截器类</strong>：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.ModelAndView;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionLoggingInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span> (ex != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 记录异常日志</span><br>            <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(handler.getClass());<br>            logger.error(<span class="hljs-string">&quot;Exception caught during request processing: &quot;</span>, ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>注册拦截器</strong>：</p><p>在Spring Boot应用中，通过配置类注册拦截器。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ExceptionLoggingInterceptor exceptionLoggingInterceptor;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(exceptionLoggingInterceptor);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这两种方式各有优劣：</p><ul><li><strong>切面（Aspect）</strong>适用于需要在方法级别捕获异常的情况，可以轻松应用于所有方法。</li><li><strong>拦截器（Interceptor）</strong>适用于需要在请求级别捕获异常的情况，更适合Web应用程序中的HTTP请求处理。</li></ul><p>选择哪种方式取决于你的具体需求。如果你希望对所有方法的异常进行统一处理，切面可能更合适；如果你需要对HTTP请求处理的异常进行统一处理，拦截器则更为合适。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在linux上使用代理</title>
    <link href="/2024/07/26/%E5%9C%A8linux%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/"/>
    <url>/2024/07/26/%E5%9C%A8linux%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>要在 Linux 命令行下使用 Clash Verge，需要按照以下步骤进行：</p><h3 id="1-安装-Clash-Verge"><a href="#1-安装-Clash-Verge" class="headerlink" title="1. 安装 Clash Verge"></a>1. 安装 Clash Verge</h3><p>首先，确保你的系统已经安装了 Clash Core。Clash Verge 是一个图形界面管理工具，而 Clash 本身是需要运行在后台的代理工具。</p><h4 id="下载-Clash"><a href="#下载-Clash" class="headerlink" title="下载 Clash"></a>下载 Clash</h4><p><a href="%E5%9C%A8linux%E4%B8%8A%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86/mihomo-linux-amd64-v1.18.6.deb">mihomo-linux-amd64-v1.18.6.deb</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg -i mihomo-linux-amd64-v1.18.6.deb     <br><span class="hljs-built_in">chmod</span> 777 mihomo-linux-amd64-v1.18.6.deb <br>sudo <span class="hljs-built_in">mv</span> mihomo-linux-amd64-v1.18.6 clash<br></code></pre></td></tr></table></figure><h3 id="2-配置-Clash"><a href="#2-配置-Clash" class="headerlink" title="2. 配置 Clash"></a>2. 配置 Clash</h3><p>在使用 Clash Verge 之前，需要先配置 Clash 的 <code>config.yaml</code> 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">拷贝windows上的配置：D:\soft\clash-verge-1.6.2\.config\io.github.clash-verge-rev.clash-verge-rev/clash-verge.yaml<br>wget -O /root/.config/mihomo/config.yaml 你配置好的clash-verge.yaml<br></code></pre></td></tr></table></figure><h3 id="3-启动-Clash"><a href="#3-启动-Clash" class="headerlink" title="3. 启动 Clash"></a>3. 启动 Clash</h3><p>在命令行中启动 Clash：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> ./clash &amp;<br></code></pre></td></tr></table></figure><p>Clash Verge 启动后，将打开一个本地的图形界面，你可以通过浏览器访问该界面，通常是 <code>http://localhost:7899</code> 或者其他配置文件中指定的端口。</p><ol><li><strong>创建代理配置文件</strong>：在Kali系统的Docker配置目录下创建一个名为<code>/etc/systemd/system/docker.service.d/http-proxy.conf</code>的文件。如果该目录不存在，请先创建它。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">mkdir</span> -p /etc/systemd/system/docker.service.d<br>sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>配置代理</strong>：在<code>http-proxy.conf</code>文件中添加以下内容，将<code>http://127.0.0.1:7899</code>替换为你的代理服务器地址和端口。</li></ol><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTP_PROXY=http://127.0.0.1:7899&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;HTTPS_PROXY=http://127.0.0.1:7899&quot;</span><br><span class="hljs-attr">Environment</span>=<span class="hljs-string">&quot;NO_PROXY=localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>重新加载守护进程并重启Docker服务</strong>：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>验证代理配置</strong>：你可以通过以下命令来验证Docker是否通过代理服务器进行连接：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker info<br></code></pre></td></tr></table></figure><p>在输出信息中找到<code>HTTP Proxy</code>和<code>HTTPS Proxy</code>条目，检查它们是否显示了你配置的代理服务器地址。</p><p>如果你需要为Docker客户端配置代理（如<code>docker build</code>命令），可以在你的shell配置文件（如<code>~/.bashrc</code>或<code>~/.zshrc</code>）中添加以下行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> HTTP_PROXY=<span class="hljs-string">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class="hljs-built_in">export</span> HTTPS_PROXY=<span class="hljs-string">&quot;http://your-proxy.example.com:8080&quot;</span><br><span class="hljs-built_in">export</span> NO_PROXY=<span class="hljs-string">&quot;localhost,127.0.0.1&quot;</span><br></code></pre></td></tr></table></figure><p>保存文件并加载新的配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">source</span> ~/.bashrc  <span class="hljs-comment"># 或者 source ~/.zshrc</span><br></code></pre></td></tr></table></figure><p>这样，Docker客户端在运行时也会通过代理服务器进行连接。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>select for update用法的好处</title>
    <link href="/2024/07/25/select-for-update%E7%94%A8%E6%B3%95%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    <url>/2024/07/25/select-for-update%E7%94%A8%E6%B3%95%E7%9A%84%E5%A5%BD%E5%A4%84/</url>
    
    <content type="html"><![CDATA[<p><code>SELECT FOR UPDATE</code> 是一种用于数据库管理系统（DBMS）的 SQL 语句，主要用于在事务处理过程中锁定选定的行，防止其他事务修改这些行，直到当前事务完成。这种机制在处理并发访问时尤其有用，以下是其具体好处：</p><h3 id="1-避免脏读、不可重复读和幻读"><a href="#1-避免脏读、不可重复读和幻读" class="headerlink" title="1. 避免脏读、不可重复读和幻读"></a>1. <strong>避免脏读、不可重复读和幻读</strong></h3><p>通过使用 <code>SELECT FOR UPDATE</code>，可以锁定选定的行，确保其他事务无法对这些行进行修改，从而防止以下类型的并发问题：</p><ul><li><strong>脏读</strong>：一个事务可以读取到另一个未提交事务的修改。</li><li><strong>不可重复读</strong>：一个事务在两次读取之间，另一个事务修改了数据，导致两次读取结果不同。</li><li><strong>幻读</strong>：一个事务在两次读取之间，另一个事务插入了新行，导致第二次读取返回更多行。</li></ul><h3 id="2-确保一致性和完整性"><a href="#2-确保一致性和完整性" class="headerlink" title="2. 确保一致性和完整性"></a>2. <strong>确保一致性和完整性</strong></h3><p>在执行复杂的业务逻辑时，例如账户转账、库存更新等，使用 <code>SELECT FOR UPDATE</code> 可以确保在整个事务过程中数据的一致性和完整性。这样可以避免在事务中间其他事务对数据的修改，导致数据不一致。</p><h3 id="3-防止丢失更新"><a href="#3-防止丢失更新" class="headerlink" title="3. 防止丢失更新"></a>3. <strong>防止丢失更新</strong></h3><p>当多个事务试图同时更新同一行时，<code>SELECT FOR UPDATE</code> 可以防止丢失更新问题。它确保一个事务完成后，其他事务才能继续执行更新操作，避免了两个事务的更新互相覆盖。</p><h3 id="4-优化并发控制"><a href="#4-优化并发控制" class="headerlink" title="4. 优化并发控制"></a>4. <strong>优化并发控制</strong></h3><p>使用 <code>SELECT FOR UPDATE</code> 可以提供细粒度的并发控制，通过只锁定必要的行，而不是整个表，从而提高系统的并发性能和资源利用率。</p><h3 id="5-简化编程模型"><a href="#5-简化编程模型" class="headerlink" title="5. 简化编程模型"></a>5. <strong>简化编程模型</strong></h3><p><code>SELECT FOR UPDATE</code> 可以简化开发人员的编程模型，不需要手动处理复杂的锁机制，数据库会自动处理行锁定和释放，从而减少编程错误的机会。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> accounts <span class="hljs-keyword">WHERE</span> account_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span>;<br><span class="hljs-comment">-- 执行一些需要锁定这行的操作，例如更新账户余额</span><br><span class="hljs-keyword">UPDATE</span> accounts <span class="hljs-keyword">SET</span> balance <span class="hljs-operator">=</span> balance <span class="hljs-operator">-</span> <span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> account_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>在这个示例中，通过 <code>SELECT FOR UPDATE</code> 锁定 <code>account_id = 1</code> 的行，确保在事务提交之前，没有其他事务可以修改该行。</p><p>总的来说，<code>SELECT FOR UPDATE</code> 提供了一种强大的并发控制机制，帮助确保数据的完整性、一致性，并防止并发修改导致的问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tcp6 如何 改成tcp4</title>
    <link href="/2024/07/25/tcp6-%E5%A6%82%E4%BD%95-%E6%94%B9%E6%88%90tcp4/"/>
    <url>/2024/07/25/tcp6-%E5%A6%82%E4%BD%95-%E6%94%B9%E6%88%90tcp4/</url>
    
    <content type="html"><![CDATA[<p>要将 TCP6（IPv6）转换为 TCP4（IPv4），具体步骤取决于你想要转换的上下文。例如，你可能想要在服务器配置、网络服务配置或者应用程序中进行这种转换。以下是几种常见的方法：</p><h3 id="1-修改系统配置"><a href="#1-修改系统配置" class="headerlink" title="1. 修改系统配置"></a>1. 修改系统配置</h3><p>如果你的系统默认使用 IPv6，你可以通过修改系统配置来优先使用 IPv4。</p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>编辑 <code>/etc/gai.conf</code> 文件，取消 <code>precedence ::ffff:0:0/96  100</code> 的注释。这会让系统优先使用 IPv4。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nano /etc/gai.conf<br></code></pre></td></tr></table></figure><p>取消下面这行的注释：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">precedence ::ffff:0:0/96  100<br></code></pre></td></tr></table></figure><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>可以通过命令行禁用IPv6：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netsh interface ipv6 <span class="hljs-built_in">set</span> prefixpolicy ::ffff:0:0/96  40 1<br></code></pre></td></tr></table></figure><h3 id="2-配置网络服务"><a href="#2-配置网络服务" class="headerlink" title="2. 配置网络服务"></a>2. 配置网络服务</h3><p>对于具体的网络服务，你可以在配置文件中指定使用 IPv4。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>在 Nginx 配置文件中，你可以指定服务器监听的 IP 地址为 IPv4 地址。例如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span> ipv6only=<span class="hljs-literal">off</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>将上面的配置改为仅监听 IPv4 地址：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h4><p>在 Apache 的配置文件中，你可以指定监听的 IP 地址：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">80</span><br><span class="hljs-attribute">Listen</span><span class="hljs-meta"> [::]:80</span><br></code></pre></td></tr></table></figure><p>将上面的配置改为仅监听 IPv4 地址：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Listen</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h3 id="3-修改应用程序配置"><a href="#3-修改应用程序配置" class="headerlink" title="3. 修改应用程序配置"></a>3. 修改应用程序配置</h3><p>对于某些应用程序，你可能需要修改代码或配置文件以确保它们仅使用 IPv4。</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><p>在 Python 应用中，你可以通过 <code>socket</code> 模块指定仅使用 IPv4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-comment"># 创建一个IPv4的TCP socket</span><br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock.bind((<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">8080</span>))<br>sock.listen(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>在 Java 应用中，你可以设置 <code>java.net.preferIPv4Stack</code> 系统属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.setProperty(<span class="hljs-string">&quot;java.net.preferIPv4Stack&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">// 其他代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>具体的方法取决于你的具体需求和环境。在一般情况下，配置文件和系统设置通常可以解决大多数问题。如果你有更具体的应用或环境，请提供更多详细信息，我可以提供更具体的指导。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置上传文件大小</title>
    <link href="/2024/07/24/nginx%E9%85%8D%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/"/>
    <url>/2024/07/24/nginx%E9%85%8D%E7%BD%AE%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<p>要在Nginx中配置上传文件，您需要对Nginx的配置文件进行一些修改。以下是一个示例配置，说明如何配置Nginx以支持文件上传：</p><ol><li><p><strong>配置Nginx处理上传文件的大小限制：</strong></p><p>打开您的Nginx配置文件（通常位于 <code>/etc/nginx/nginx.conf</code> 或 <code>/etc/nginx/conf.d/default.conf</code>）并找到 <code>http</code> 块或 <code>server</code> 块。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-comment"># 其他配置...</span><br>    <br>    <span class="hljs-comment"># 设置客户端上传文件的最大限制（单位：字节）</span><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50M</span>;<br><br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span> example.com;<br><br>        <span class="hljs-comment"># 其他配置...</span><br><br>        <span class="hljs-section">location</span> /upload &#123;<br>            <span class="hljs-comment"># 将文件上传到指定的目录</span><br>            <span class="hljs-attribute">root</span> /var/www/uploads;<br><br>            <span class="hljs-comment"># 其他配置...</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个示例中，<code>client_max_body_size</code> 被设置为 <code>50M</code>，这意味着客户端可以上传最大为50MB的文件。</p></li><li><p><strong>配置上传文件的保存路径：</strong></p><p>您可以在 <code>location</code> 块中指定文件上传的路径。例如，上面的示例中，上传的文件将被保存到 <code>/var/www/uploads</code> 目录。</p></li><li><p><strong>重启Nginx以使配置生效：</strong></p><p>修改完配置文件后，需要重启Nginx服务以使配置生效。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo systemctl restart nginx<br></code></pre></td></tr></table></figure></li><li><p><strong>处理上传的文件：</strong></p><p>需要注意的是，Nginx本身不会处理上传的文件，您需要在后端应用中处理这些文件。例如，您可以使用PHP、Python、Node.js等语言在后端处理文件上传。</p><p>这是一个使用PHP处理文件上传的简单示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$uploadDir</span> = <span class="hljs-string">&#x27;/var/www/uploads/&#x27;</span>;<br>    <span class="hljs-variable">$uploadFile</span> = <span class="hljs-variable">$uploadDir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$uploadFile</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传成功。&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传失败。&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后在Nginx的配置文件中，您可以配置一个 <code>location</code> 块来处理文件上传请求：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /upload &#123;<br>    <span class="hljs-attribute">root</span> /var/www/uploads;<br><br>    <span class="hljs-comment"># 代理到后端PHP脚本</span><br>    <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;<br>    <span class="hljs-attribute">include</span> fastcgi_params;<br>    <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME /var/www/html/upload.php;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker修改应用为自动启动</title>
    <link href="/2024/07/23/docker%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E4%B8%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/"/>
    <url>/2024/07/23/docker%E4%BF%AE%E6%94%B9%E5%BA%94%E7%94%A8%E4%B8%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>是的，Docker 提供了一种简单的方法来配置容器在系统启动时自动启动，这就是使用 <code>docker update</code> 命令配置容器的重启策略。</p><p>以下是如何使用 <code>docker update</code> 命令来配置现有的容器在系统启动时自动启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update --restart unless-stopped &lt;container_name_or_id&gt;<br></code></pre></td></tr></table></figure><p>例如，如果你的容器名为 <code>mysql-container</code>，你可以这样配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure><p>这样配置后，当系统重启时，Docker 会根据 <code>unless-stopped</code> 策略自动重启该容器。以下是一些常用的重启策略：</p><ul><li><code>no</code>: 容器不会自动重启（默认值）。</li><li><code>on-failure</code>: 仅当容器退出状态非零时才重启。</li><li><code>always</code>: 无论退出状态如何，总是重启容器。</li><li><code>unless-stopped</code>: 容器除非被手动停止，否则总是重启。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>以下是一个完整的示例，展示如何启动一个新的 MySQL 容器并配置其在系统重启时自动启动：</p><ol><li><p>启动一个 MySQL 容器：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -d \<br>    --name mysql-container \<br>    -e MYSQL_ROOT_PASSWORD=my-secret-pw \<br>    -v /my/own/datadir:/var/lib/mysql \<br>    mysql:latest<br></code></pre></td></tr></table></figure></li><li><p>配置容器的重启策略：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker update --restart unless-stopped mysql-container<br></code></pre></td></tr></table></figure></li></ol><h3 id="检查容器重启策略"><a href="#检查容器重启策略" class="headerlink" title="检查容器重启策略"></a>检查容器重启策略</h3><p>你可以使用以下命令来检查容器的重启策略：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect -f <span class="hljs-string">&#x27;&#123;&#123; .HostConfig.RestartPolicy.Name &#125;&#125;&#x27;</span> mysql-container<br></code></pre></td></tr></table></figure><p>这将输出容器的当前重启策略。</p><h3 id="使用-Docker-Compose"><a href="#使用-Docker-Compose" class="headerlink" title="使用 Docker Compose"></a>使用 Docker Compose</h3><p>如果你使用 Docker Compose，可以在 <code>docker-compose.yml</code> 文件中配置重启策略：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysql:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql-container</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">my-secret-pw</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/my/own/datadir:/var/lib/mysql</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure><p>然后，使用以下命令启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过上述方法，你可以轻松地配置 Docker 容器在系统重启时自动启动，无论是通过 <code>docker run</code>、<code>docker update</code> 还是 <code>docker-compose</code>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux下实现钉钉告警</title>
    <link href="/2024/07/23/linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/"/>
    <url>/2024/07/23/linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E9%92%89%E9%92%89%E5%91%8A%E8%AD%A6/</url>
    
    <content type="html"><![CDATA[<p>在Linux系统中，可以使用Shell脚本和定时任务（cron）来监控CPU、内存和硬盘使用情况，当超过指定阈值时发送告警。为了发送钉钉告警，需要用到钉钉的自定义机器人接口。<br>需要注意的是，本教程的机器是12核心。因此需要得到12核心的最高cpu使用率后取最大值。</p><p>以下是实现此功能的步骤：</p><ol><li><p><strong>创建钉钉机器人并获取Webhook URL：</strong></p><ul><li>登录钉钉，创建自定义机器人并获取Webhook URL，用于发送告警信息。</li></ul></li><li><p><strong>编写Shell脚本：</strong></p><ul><li>编写一个Shell脚本来检查系统资源的使用情况，并在超过阈值时发送钉钉告警。</li></ul></li><li><p><strong>配置定时任务（cron）：</strong></p><ul><li>将脚本配置为定时任务，定期检查系统资源的使用情况。</li></ul></li></ol><h3 id="1-创建钉钉机器人并获取Webhook-URL"><a href="#1-创建钉钉机器人并获取Webhook-URL" class="headerlink" title="1. 创建钉钉机器人并获取Webhook URL"></a>1. 创建钉钉机器人并获取Webhook URL</h3><p>在钉钉中创建自定义机器人，记录下Webhook URL，这将在脚本中用于发送告警。</p><ul><li>例如：<a href="https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5">https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</a></li></ul><h3 id="2-编写Shell脚本"><a href="#2-编写Shell脚本" class="headerlink" title="2. 编写Shell脚本"></a>2. 编写Shell脚本</h3><p>下面是一个示例Shell脚本<code>monitor.sh</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 获取cpu使用率</span><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">get_cpu_usage</span></span>()&#123;<br>    <span class="hljs-built_in">echo</span> $(top -bn1 | grep <span class="hljs-string">&quot;Cpu(s)&quot;</span> | awk <span class="hljs-string">&#x27;&#123;print 100 - $8&#125;&#x27;</span> | awk <span class="hljs-string">&#x27;&#123;printf &quot;%.2f&quot;, $1&#125;&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment"># 获取磁盘使用率</span><br>data_name=<span class="hljs-string">&quot;/&quot;</span> <br>diskUsage=$(<span class="hljs-built_in">df</span> -h | grep -w <span class="hljs-variable">$data_name</span> | awk <span class="hljs-string">&#x27;&#123;print $5&#125;&#x27;</span> | sed <span class="hljs-string">&#x27;s/%//&#x27;</span>)<br><br><span class="hljs-comment"># 获取内存情况</span><br>mem_total=$(free -m | awk <span class="hljs-string">&#x27;NR==2 &#123;print $2&#125;&#x27;</span>)<br>mem_used=$(free -m | awk <span class="hljs-string">&#x27;NR==2 &#123;print $3&#125;&#x27;</span>)<br><br><span class="hljs-comment"># 统计内存使用率</span><br>mem_used_percent=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;scale=2; (<span class="hljs-variable">$mem_used</span> / <span class="hljs-variable">$mem_total</span>) * 100&quot;</span> | bc)<br><br><span class="hljs-comment"># 获取报警时间</span><br>now_time=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&#x27;+%F %T&#x27;</span>)<br><br>user=<span class="hljs-string">&quot;18857415467&quot;</span><br><br><span class="hljs-comment"># 主机信息</span><br>Date_time=$(<span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%Y-%m-%d--%H:%M:%S&quot;</span>)<br>IP_addr=$(hostname -I | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br><br><span class="hljs-comment"># webhook url</span><br>Dingding_Url=<span class="hljs-string">&quot;https://oapi.dingtalk.com/robot/send?access_token=073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">SendDownMessageToDingding</span></span>()&#123;<br>    <span class="hljs-comment"># 发送钉钉消息</span><br>    curl -s <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;Dingding_Url&#125;</span>&quot;</span> -H <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> -d <span class="hljs-string">&quot;</span><br><span class="hljs-string">    &#123;</span><br><span class="hljs-string">     &#x27;msgtype&#x27;: &#x27;text&#x27;,</span><br><span class="hljs-string">     &#x27;text&#x27;: &#123;&#x27;content&#x27;: &#x27;资源耗尽警告！\n巡查时间：<span class="hljs-variable">$&#123;Date_time&#125;</span>\nIP地址：<span class="hljs-variable">$&#123;IP_addr&#125;</span>\n资源状况如下:\n【CPU使用率：<span class="hljs-variable">$&#123;cpuUsage&#125;</span>%】\n【磁盘使用率：<span class="hljs-variable">$&#123;diskUsage&#125;</span>%】\n【内存使用率：<span class="hljs-variable">$&#123;mem_used_percent&#125;</span>%】&#x27;&#125;,</span><br><span class="hljs-string">     &#x27;at&#x27;: &#123;&#x27;atMobiles&#x27;: [&#x27;<span class="hljs-variable">$&#123;user&#125;</span>&#x27;], &#x27;isAtAll&#x27;: true&#125;</span><br><span class="hljs-string">      &#125;&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">check</span></span>()&#123;<br>    cpuUsage=$(get_cpu_usage)<br>    <span class="hljs-keyword">if</span> (( $(echo &quot;<span class="hljs-variable">$cpuUsage</span> &gt; <span class="hljs-number">90</span>&quot; | bc -l) )); <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;检测到CPU使用率高于90%，开始1分钟监控...&quot;</span><br>        high_cpu_duration=0<br>        <span class="hljs-keyword">for</span> ((i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">60</span>; i++)); <span class="hljs-keyword">do</span><br>            <span class="hljs-built_in">sleep</span> 1<br>            cpuUsage=$(get_cpu_usage)<br>            <span class="hljs-keyword">if</span> (( $(echo &quot;<span class="hljs-variable">$cpuUsage</span> &gt; <span class="hljs-number">90</span>&quot; | bc -l) )); <span class="hljs-keyword">then</span><br>                ((high_cpu_duration++))<br>            <span class="hljs-keyword">else</span><br>                high_cpu_duration=0<br>            <span class="hljs-keyword">fi</span><br><br>            <span class="hljs-keyword">if</span> (( high_cpu_duration &gt;= <span class="hljs-number">60</span> )); <span class="hljs-keyword">then</span><br>                <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;CPU使用率持续高于90%超过1分钟，发送警报...&quot;</span><br>                SendDownMessageToDingding<br>                <span class="hljs-built_in">break</span><br>            <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">done</span><br>    <span class="hljs-keyword">fi</span><br><br>    <span class="hljs-keyword">if</span> (( $(echo &quot;<span class="hljs-variable">$diskUsage</span> &gt; <span class="hljs-number">80</span>&quot; | bc -l) )) || (( $(echo &quot;<span class="hljs-variable">$mem_used_percent</span> &gt; <span class="hljs-number">80</span>&quot; | bc -l) )); <span class="hljs-keyword">then</span><br>        SendDownMessageToDingding<br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br>check<br><br></code></pre></td></tr></table></figure><p>将<code>073d84ae5a2f83494c9271e0e1683603130b19e77620a836e3682a62ffd1a8f5</code>替换为你从钉钉获取的Webhook URL的token。</p><h3 id="3-配置定时任务（cron）"><a href="#3-配置定时任务（cron）" class="headerlink" title="3. 配置定时任务（cron）"></a>3. 配置定时任务（cron）</h3><p>通过cron定期运行这个脚本。首先，编辑cron配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">crontab -e<br></code></pre></td></tr></table></figure><p>然后添加以下内容以每分钟运行一次脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">* * * * * /path/to/monitor.sh<br></code></pre></td></tr></table></figure><p>确保脚本<code>monitor.sh</code>有执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x /path/to/monitor.sh<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上述脚本和cron配置将监控CPU、内存和硬盘使用情况，并在超过设定的阈值时通过钉钉发送告警消息。你可以根据实际需求调整脚本的执行频率和告警阈值。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>学习it网站推荐</title>
    <link href="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <url>/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<p>分享一些好的网站，个人学习常用的网站，作为分享后续持续更新.</p><h2 id="网站资源"><a href="#网站资源" class="headerlink" title="网站资源"></a>网站资源</h2><h3 id="技术学习网站"><a href="#技术学习网站" class="headerlink" title="技术学习网站"></a>技术学习网站</h3><ul><li>架构师学习 <a href="https://bugstack.cn/md/other/guide-to-reading.html#%E4%B8%80%E3%80%81%E6%9C%AC%E7%AB%99%E7%9F%A5%E8%AF%86%E9%98%85%E8%A7%88" title="https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览">https://bugstack.cn/md/other/guide-to-reading.html#一、本站知识阅览</a><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_PEAqPgamQe.png" class></li><li>源码学习：<a href="https://doocs.github.io/source-code-hunter/#/" title="https://doocs.github.io/source-code-hunter/#/">https://doocs.github.io/source-code-hunter/#/</a><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_qBL4LWSs2U.png" class></li><li>互联网 Java 工程师进阶知识完全扫盲:  <a href="https://doocs.github.io/advanced-java/#/?id=%E4%BA%92%E8%81%94%E7%BD%91-java-%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%E5%AE%8C%E5%85%A8%E6%89%AB%E7%9B%B2" title="https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲">https://doocs.github.io/advanced-java/#/?id=互联网-java-工程师进阶知识完全扫盲</a><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_RtiUPlWbme.png" class></li><li>叶良辰の学习笔记 <a href="https://yangzhiwen911.github.io/zh/guide/" title="https://yangzhiwen911.github.io/zh/guide/">https://yangzhiwen911.github.io/zh/guide/</a><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_tMLd_Cap6a.png" class></li><li>图灵Java架构师学习路线(点击链接看新版本) <a href="https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map" title="https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map">https://www.processon.com/view/link/5eccea8fe0b34d5f263038f0#map</a><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_-m-m1AZh7M.png" class></li><li><a href="https://www.thebyte.com.cn/" title="深入架构原理与实践">深入架构原理与实践</a> <a href="https://www.thebyte.com.cn/" title="https://www.thebyte.com.cn/">https://www.thebyte.com.cn/</a>;<img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_zZOb0Uu1MN.png" class></li><li>Kubernetes 实践指南 <a href="https://imroc.cc/kubernetes/" title="https://imroc.cc/kubernetes/">https://imroc.cc/kubernetes/</a>;<br>vip破解视频  <a href="https://share.xiaole88.com/%E5%85%B6%E4%BB%96%E4%B8%9C%E8%A5%BF/%E8%80%81%E9%BD%90%E7%9A%84IT%E5%8A%A0%E6%B2%B9%E7%AB%99" title="https://share.xiaole88.com/其他东西/老齐的IT加油站">https://share.xiaole88.com/其他东西/老齐的IT加油站</a><br><a href="https://share.xiaole88.com/K8%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%AE%B1" title="https://share.xiaole88.com/K8渗透工具箱">https://share.xiaole88.com/K8渗透工具箱</a></li></ul><h3 id="工具网站："><a href="#工具网站：" class="headerlink" title="工具网站："></a>工具网站：</h3><ul><li><p><a href="https://www.flickr.com/" title="https://www.flickr.com/">https://www.flickr.com/</a>   好的照片不能我一个人分享</p></li><li><p><a href="https://markmap.js.org/repl" title="https://markmap.js.org/repl">https://markmap.js.org/repl</a>  将markmap 生成图例</p><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_bUw4GOE3i3.png" class></li><li><p>苹果id相关：</p><p><a href="https://appleid.stryun.top/" title="https://appleid.stryun.top/">https://appleid.stryun.top/</a></p><p><a href="https://apple.hutaosubconverter.com/hutao" title="https://apple.hutaosubconverter.com/hutao">https://apple.hutaosubconverter.com/hutao</a></p></li></ul><h3 id="营销方向学习："><a href="#营销方向学习：" class="headerlink" title="营销方向学习："></a>营销方向学习：</h3><ul><li><p>宣传图生成 <a href="https://design.palxp.cn/home?tempid=1188" title="https://design.palxp.cn/home?tempid=1188">https://design.palxp.cn/home?tempid=1188</a></p><img src="/2024/06/26/%E5%AD%A6%E4%B9%A0it%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/image_SOZXE0ImbY.png" class></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
